# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from services.savour_rpc import appchain_pb2 as savour__rpc_dot_appchain__pb2


class AppChainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.L1StakerRewardsAmount = channel.unary_unary(
                '/services.savour_rpc.appchain.AppChainService/L1StakerRewardsAmount',
                request_serializer=savour__rpc_dot_appchain__pb2.L1StakerRewardsAmountRequest.SerializeToString,
                response_deserializer=savour__rpc_dot_appchain__pb2.L1StakerRewardsAmountResponse.FromString,
                )
        self.L2StakerRewardsAmount = channel.unary_unary(
                '/services.savour_rpc.appchain.AppChainService/L2StakerRewardsAmount',
                request_serializer=savour__rpc_dot_appchain__pb2.L2StakerRewardsAmountRequest.SerializeToString,
                response_deserializer=savour__rpc_dot_appchain__pb2.L2StakerRewardsAmountResponse.FromString,
                )


class AppChainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def L1StakerRewardsAmount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def L2StakerRewardsAmount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppChainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'L1StakerRewardsAmount': grpc.unary_unary_rpc_method_handler(
                    servicer.L1StakerRewardsAmount,
                    request_deserializer=savour__rpc_dot_appchain__pb2.L1StakerRewardsAmountRequest.FromString,
                    response_serializer=savour__rpc_dot_appchain__pb2.L1StakerRewardsAmountResponse.SerializeToString,
            ),
            'L2StakerRewardsAmount': grpc.unary_unary_rpc_method_handler(
                    servicer.L2StakerRewardsAmount,
                    request_deserializer=savour__rpc_dot_appchain__pb2.L2StakerRewardsAmountRequest.FromString,
                    response_serializer=savour__rpc_dot_appchain__pb2.L2StakerRewardsAmountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.savour_rpc.appchain.AppChainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AppChainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def L1StakerRewardsAmount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.savour_rpc.appchain.AppChainService/L1StakerRewardsAmount',
            savour__rpc_dot_appchain__pb2.L1StakerRewardsAmountRequest.SerializeToString,
            savour__rpc_dot_appchain__pb2.L1StakerRewardsAmountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def L2StakerRewardsAmount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.savour_rpc.appchain.AppChainService/L2StakerRewardsAmount',
            savour__rpc_dot_appchain__pb2.L2StakerRewardsAmountRequest.SerializeToString,
            savour__rpc_dot_appchain__pb2.L2StakerRewardsAmountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
