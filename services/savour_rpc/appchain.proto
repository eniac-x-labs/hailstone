syntax = "proto3";

option go_package = "./protobuf/pb";
package acorus.rpc.appchain;

// scripts
// protoc --go_out=./protobuf/pb --go_opt=paths=source_relative --go-grpc_out=./protobuf/pb --go-grpc_opt=paths=source_relative appchain.proto

service AppChainService {
  rpc L1StakerRewardsAmount(L1StakerRewardsAmountRequest) returns (L1StakerRewardsAmountResponse);
  rpc L2StakerRewardsAmount(L2StakerRewardsAmountRequest) returns (L2StakerRewardsAmountResponse);
  rpc L2UnStakeRecord(L2UnStakeRecordRequest) returns (L2UnStakeRecordResponse);
  rpc L2StakeRecord(L2StakeRecordRequest) returns (L2StakeRecordResponse);
  rpc L2WithdrawRecord(L2WithdrawRecordRequest) returns (L2WithdrawRecordResponse);

}

message L1StakerRewardsAmountRequest {
  string chain_id = 1;
  string staker_address = 2;
  string strategies = 3;
}

message L1StakerRewardsAmountResponse {
  bool success = 1;
  string message = 2;
  string income = 3;
}

message L2StakerRewardsAmountRequest {
  string chain_id = 1;
  string staker_address = 2;
  string strategy = 3;
}

message L2StakerRewardsAmountResponse {
  bool success = 1;
  string message = 2;
  string income = 3;
}

message L2UnStakeRecordRequest {
  string staker_address = 1;
  string strategy = 2;
  uint32 page = 3;
  uint32 page_size = 4;
}

message L2UnStakeRecord{
  string guid = 1;
  int64 block_number = 2;
  string tx_hash = 3;
  string eth_amount = 4;
  string locked_amount = 5;
  string claim_tx_hash = 6;
  string l2_strategy = 7;
  string staker = 8;
  string bridge = 9;
  string source_chain_id = 10;
  string dest_chain_id = 11;
  int32 status = 12;
  bool notify_relayer = 13;
  uint64 created = 14;
  uint64 updated = 15;
}
message L2UnStakeRecordResponse {
  bool success = 1;
  string message = 2;
  message L2UnStakePage {
    uint32 current_page = 1;
    uint32 page_size = 2;
    int64 total = 3;
    repeated L2UnStakeRecord records = 4;
  }
  L2UnStakePage page = 3;
}



message L2StakeRecordRequest {
  string staker_address = 1;
  string strategy = 2;
  uint32 page = 3;
  uint32 page_size = 4;
}

message L2StakeRecord {
  string guid = 1;
  int64 block_number = 2;
  string tx_hash = 3;
  string shares = 4;
  string strategy = 5;
  string staker = 6;
  string token_address = 7;
  string chain_id = 8;
  int32 status = 9;
  string use_shares = 10;
  uint64 created = 11;
}

message L2StakeRecordResponse {
  bool success = 1;
  string message = 2;
  message L2StakePage {
    uint32 current_page = 1;
    uint32 page_size = 2;
    int64 total = 3;
    repeated L2StakeRecord records = 4;
  }
  L2StakePage page = 3;
}



message L2WithdrawRecordRequest {
  string address = 1;
  string strategy = 2;
  uint32 page = 4;
  uint32 page_size = 5;
}

message L2WithdrawRecord {
  string guid = 1;
  int64 block_number = 2;
  string tx_hash = 3;
  string shares = 4;
  string strategy = 5;
  string staker = 6;
  string chain_id = 7;
  string operator = 8;
  uint64 created = 9;
}

message L2WithdrawRecordResponse {
  bool success = 1;
  string message = 2;
  message L2WithdrawPage {
    uint32 current_page = 1;
    uint32 page_size = 2;
    int64 total = 3;
    repeated L2WithdrawRecord records = 4;
  }
  L2WithdrawPage page = 3;
}

